:- module(analyzer, 
	[формальный_анализ/2,
	 сообщить_словник/1,

	близко/3]).


:- redefine_system_predicate((get(_))).

:- thread_local
	хранилище_символов/1,
	хранилище_слов/1,
	
	хранилище_словника/1.

%=========================================================================
%=========================================================================

формальный_анализ(—трока, —писок_—лов) :-
	downcase_atom(—трока, —трока_Down),
	разборка(—трока_Down, —писок_—лов),
	!.

%=========================================================================

найти_дефис(List1,[],List2):-
	reverse(List1,List2).
найти_дефис(List,[A,'-'|X], Y) :- 
	reverse(List,List1),
	append(List1,[A,' ','-',' '|X],Y),
	!.
найти_дефис(List,[A|X],Y) :- 
	найти_дефис([A|List],X,Y).

%=========================================================================


разборка(Str, List) :-
	List = [],
	retractall(хранилище_слов(_)),
	retractall(хранилище_символов(_)),


	atom_chars(Str, CharList),
	найти_дефис([],CharList,CharListNew),

	
	member(Char, CharListNew),
	анализ_символа(Char),
      fail;
	занести_слово,
	
	удалить_пустые_слова,
	findall(W, хранилище_слов(W), List).

	
анализ_символа(Char) :-
	atom_chars(' -.,;:"/?!\\\'()=', SepList),
	member(Char, SepList),
	
	занести_слово,
	!;

	assert(хранилище_символов(Char)).
			
занести_слово :-
	findall(C, хранилище_символов(C), WordAsList),
	atom_chars(Word, WordAsList),
	assert(хранилище_слов(Word)),
	retractall(хранилище_символов(_)).
	
удалить_пустые_слова :-
	retractall(хранилище_слов('')).

%==============================================================
%==============================================================

сообщить_словник(—ловник) :-
	retractall(хранилище_словника(_)),
	assert(хранилище_словника(—ловник)).


%================================================================
%================================================================

%=========================================================================

смысл(—мысл) --> [“ермин], {распознать_смысл(—мысл, “ермин)}.

распознать_смысл(—мысл, —лово) :-
	хранилище_словника(—ловарь),
	lists: member(словарь(—мысл, WD—писок“ерминов), —ловарь),

        string_to_list(—лово, —лово ак—писок—имволов),
	  member(WD“ермин, WD—писок“ерминов),
	  WD“ермин = wd( орень, _, —писок“ипов—лова),
          string_to_list( орень,  орень ак—писок—имволов),
          append( орень ак—писок—имволов, _, —лово ак—писок—имволов),
	   member(“ип—лова, —писок“ипов—лова),
           распознать_слово(—лово,  орень, “ип—лова).
	

распознать_слово(—лово,  орень, e) :-	
	sub_atom(—лово, 0, _, _,  орень),
	!.


распознать_слово(—лово,  орень, “ип—лова) :-
	not(“ип—лова = e),	
	
	список_суффиксов(“ип—лова, —писок—уффиксов),
	member(—уффикс, —писок—уффиксов),

	 список_окончаний(“ип—лова, —писокќкончаний),
	 member(ќкончание, —писокќкончаний),

	 concat_atom([ орень, —уффикс, ќкончание], ѕретендующее—лово),
	 —лово = ѕретендующее—лово.

%=========================================================================

 список_суффиксов(a, 
		['',и,ник,ниц,ств,орств,ор,ир,аци,ист,к,атор,
		 изаци,ны,ном,ным,но,н,т,ел]).
  
 список_суффиксов(b, ['',€,и,а,€ющ,ивш,ова,у,ующ,
		 уем,овавш,авш,ающ,аем,€ем,€вш,ыва,
		 ывающ,ованн,вш,ываем,ывавш,енн,анн,н]).
 		
 список_суффиксов(c, ['',н,еск,еньк,онн]).    

 список_суффиксов(d, ['']).    



 список_окончаний(a, ['',а,€,е,ы,ов,и,й,ем,
		€ми,у,ом,ами,ой,ей,ий,ый,ах,€х,
		ю,€м,ам,го,ым,ых,ь,о]).

 список_окончаний(b, ['', ть,лись,ли,лс€,л,ютс€,
		ют,€тс€,€т,ти,тьс€,лось,ло,
		лась,ла,етс€,ет,ит,ю,ем,
		ый,ыми,ым,ые,ых,ы,ому,ого,
		ом,ое,ой,о,а€с€,а€,а,имис€,
		ими,имс€,им,ийс€,ий,иес€,ие,
		ихс€,их,еес€,ее,емус€,ему,емс€,
		ем,егос€,его,ейс€,ей,уюс€,ую,ль]).

 список_окончаний(c, ['',ый,ыми,ым,ые,ых,ы,ому,
		ого,ом,ое,ой,о,а€,а,ими,им,
		ий,ие,их,ее,ему,ем,его,ей,ую]).
 
 список_окончаний(d, ['']).

%===============================================================
%===============================================================

близко(ѕервый, ¬торой, Result) :-
	преобразование(ѕервый, First),
	преобразование(¬торой, Second),

	dwim_match(First, Second, Result).

%=================================================

преобразование(—трока, String) :-
	downcase_atom(—трока, —трокаЌ),
	atom_chars(—трокаЌ, —писок),
	преобразование_списка(—писок, List),
	atom_chars(String, List).


преобразование_списка([], []) :- !.

преобразование_списка([—имвол|’вост], [Symbol|Tail]) :-
	conv_s(—имвол, Symbol),

	преобразование_списка(’вост, Tail),
	!.

%--------------------------------------------------

conv_s(а,a).
conv_s(б,b).
conv_s(в,c).
conv_s(г,d).
conv_s(д,e).
conv_s(е,f).
conv_s(Є,g).
conv_s(ж,h).
conv_s(з,i).
conv_s(и,j).
conv_s(й,k).
conv_s(к,l).
conv_s(л,m).
conv_s(м,n).
conv_s(н,o).
conv_s(о,p).
conv_s(п,q).
conv_s(р,r).
conv_s(с,s).
conv_s(т,t).
conv_s(у,u).
conv_s(ф,v).
conv_s(х,w).
conv_s(ц,x).
conv_s(ч,y).
conv_s(ш,z).
conv_s(щ,'A').
conv_s(ъ,'B').
conv_s(ы,'C').
conv_s(ь,'D').
conv_s(э,'E').
conv_s(ю,'F').
conv_s(€,'G').

